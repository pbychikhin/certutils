
- name: Check vars
  hosts: localhost
  gather_facts: False
  tasks:
    - name: Check vars
      fail:
        msg: "Var {{ item.name }} undefined. {{ item.msg }}"
      when: item.var == false
      loop:
        - name: "certname"
          var: "{{ certname | default(false) }}"
          msg: "Please define certname. It is used as a file name/frinedly name for a cert"
        - name: "certdomains"
          var: "{{ certdomains | default(false) }}"
          msg: "Please define certdomains. This is the list of Subject alternative's"
        - name: "iissite"
          var: "{{ iissite | default(false) }}"
          msg: "Please define iissite. This is the name of the site in IIS"
        - name: "iisbindinginfo"
          var: "{{ iisbindinginfo | default(false) }}"
          msg: "Please define iisbindinginfo in the form IP:PORT:HOST_NAME. This is the IIS site's binding information"
        - name: "mode"
          var: "{{ mode | default(false) }}"
          msg: "Please define mode. This is certbot's mode (staging or production)"
        - name: "mode"
          var: "{{ mode in ['staging', 'production'] }}"
          msg: "Unknown certbot's mode. Please make sure it is either staging or production"
        - name: "target"
          var: "{{ target | default(false) }}"
          msg: "Please define target. This is target hosts (windows, windows_test, windows_prod)"

- name: Get cert
  hosts: localhost
  gather_facts: False
  tasks:
    - name: Set user's facts
      set_fact:
        u_certdir: "/etc/letsencrypt/live/{{ certname }}"
        u_workdir: "../work/{{ lookup('password', '/dev/null chars=ascii_letters,digits length=16') }}"
        u_backupdir: "../backup"
        u_scriptsdir: "../scripts"
        u_timestamp: "{{ lookup('pipe','date +%Y%m%d%H%M%S') }}"
    - name: Create work dir
      file:
        path: "{{ u_workdir }}"
        state: directory
      notify: Remove work dir
    - name: Get current cert name
      set_fact:
        u_cur_cert: "{{ lookup('pipe', 'basename $(readlink  -f ' + lookup('vars', 'u_certdir') + '/cert.pem)') }}"
    - name: Get cert
      shell: >
        certbot certonly -n -q --cert-name {{ certname }} -d {{ certdomains }}
        {{ '--staging' if mode == 'staging' else '' }}
        --force-renewal
        --dns-google
        --dns-google-credentials /etc/letsencrypt/_user/sol-dns-919b23bbb0e3.json
        --dns-google-propagation-seconds 120
    - name: Get new cert name
      set_fact:
        u_new_cert: "{{ lookup('pipe', 'basename $(readlink  -f ' + lookup('vars', 'u_certdir') + '/cert.pem)') }}"
    - name: Stop if new and current cert names are equal
      meta: end_play
      when: u_cur_cert == u_new_cert
    - name: Create firts PFX
      shell: >
        openssl pkcs12 -export
        -out {{ u_workdir }}/{{ certname }}_cert_{{ u_timestamp }}.pfx
        -in {{ u_certdir }}/cert.pem
        -inkey {{ u_certdir }}/privkey.pem
        -name {{ certname }}_{{ u_timestamp }} -password pass:''
    - name: Create second PFX
      shell: >
        openssl pkcs12 -export
        -out {{ u_workdir }}/{{ certname }}_chain_{{ u_timestamp }}.pfx
        -in {{ u_certdir }}/chain.pem -nokeys -password pass:''
    - name: Backing up PFXes
      copy:
        src: "{{ u_workdir }}/{{ item }}"
        dest: "{{ u_backupdir }}/{{ item }}"
        remote_src: yes
      loop:
        - "{{ certname }}_cert_{{ u_timestamp }}.pfx"
        - "{{ certname }}_chain_{{ u_timestamp }}.pfx"
  handlers:
    - name: Remove work dir
      file:
        path: "{{ u_workdir }}"
        state: absent

- name: Update IIS
  hosts: "{{ target }}"
  gather_facts: False
  tasks:
    - name: Set user's facts
      set_fact:
        u_backupdir: "{{ hostvars.localhost.u_backupdir }}"
        u_scriptsdir: "{{ hostvars.localhost.u_scriptsdir }}"
        u_timestamp: "{{ hostvars.localhost.u_timestamp }}"
        u_workdir: "c:/__ansible/{{ lookup('password', '/dev/null chars=ascii_letters,digits length=16') }}"
    - name: Create work dir
      win_file:
        path: "{{ u_workdir }}"
        state: directory
      notify: Remove work dir
    - name: Upload files
      win_copy:
        src: "{{ item.path }}"
        dest: "{{ u_workdir }}/{{ item.name }}"
      loop:
        - path: "{{ u_backupdir }}/{{ certname }}_cert_{{ u_timestamp }}.pfx"
          name: "{{ certname }}_cert_{{ u_timestamp }}.pfx"
        - path: "{{ u_backupdir }}/{{ certname }}_chain_{{ u_timestamp }}.pfx"
          name: "{{ certname }}_chain_{{ u_timestamp }}.pfx"
        - path: "{{ u_scriptsdir }}/install_IIS_cert.py"
          name: "install_IIS_cert.py"
    - name: Install cert (run script)
      win_command: >
        py -3
        {{ u_workdir }}/install_IIS_cert.py
        -p {{ u_workdir }}/{{ certname }}_cert_{{ u_timestamp }}.pfx
        -c {{ u_workdir }}/{{ certname }}_chain_{{ u_timestamp }}.pfx
        -s {{ iissite }}
        -b {{ iisbindinginfo }}
      register: u_commandrv
      changed_when: 'u_commandrv.stdout == "s_changed"'
  handlers:
    - name: Remove work dir
      win_file:
        path: "{{ u_workdir }}"
        state: absent
